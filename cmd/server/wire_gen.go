// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/antunesgabriel/gopher-template-default/internal/adapter"
	"github.com/antunesgabriel/gopher-template-default/internal/adapter/repository"
	"github.com/antunesgabriel/gopher-template-default/internal/app"
	"github.com/antunesgabriel/gopher-template-default/internal/app/module/health"
	"github.com/antunesgabriel/gopher-template-default/internal/app/module/user"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitServer(db *sql.DB) *app.Server {
	chiRouter := adapter.NewChiRouter()
	postgresRepository := repository.NewPostgresRespository(db)
	postgresUserRepository := repository.NewPostgresUserRespository(postgresRepository)
	userService := user.NewUserService(postgresUserRepository)
	userController := user.NewUserController(userService)
	postgresHealthRepository := repository.NewPostgresHealthRepository(postgresRepository)
	healthService := health.NewHealthService(postgresHealthRepository)
	healthController := health.NewHealthController(healthService)
	server := app.NewServer(chiRouter, userController, healthController)
	return server
}

// wire.go:

var RepositorySet = wire.NewSet(repository.NewPostgresRespository, repository.NewPostgresUserRespository, repository.NewPostgresHealthRepository)

var ServiceSet = wire.NewSet(
	RepositorySet, wire.Bind(new(user.UserRepository), new(*repository.PostgresUserRepository)), user.NewUserService, wire.Bind(new(health.HealthRepository), new(*repository.PostgresHealthRepository)), health.NewHealthService,
)

var ControllerSet = wire.NewSet(user.NewUserController, health.NewHealthController)

var ServerSet = wire.NewSet(adapter.NewChiRouter, wire.Bind(new(app.Router), new(*adapter.ChiRouter)), app.NewServer)
