// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockJWTHelper is an autogenerated mock type for the JWTHelper type
type MockJWTHelper struct {
	mock.Mock
}

type MockJWTHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTHelper) EXPECT() *MockJWTHelper_Expecter {
	return &MockJWTHelper_Expecter{mock: &_m.Mock}
}

// Encode provides a mock function with given fields: payload
func (_m *MockJWTHelper) Encode(payload map[string]interface{}) (string, error) {
	ret := _m.Called(payload)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (string, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTHelper_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockJWTHelper_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - payload map[string]interface{}
func (_e *MockJWTHelper_Expecter) Encode(payload interface{}) *MockJWTHelper_Encode_Call {
	return &MockJWTHelper_Encode_Call{Call: _e.mock.On("Encode", payload)}
}

func (_c *MockJWTHelper_Encode_Call) Run(run func(payload map[string]interface{})) *MockJWTHelper_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockJWTHelper_Encode_Call) Return(_a0 string, _a1 error) *MockJWTHelper_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTHelper_Encode_Call) RunAndReturn(run func(map[string]interface{}) (string, error)) *MockJWTHelper_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function with given fields: ctx
func (_m *MockJWTHelper) GetUserID(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTHelper_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type MockJWTHelper_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockJWTHelper_Expecter) GetUserID(ctx interface{}) *MockJWTHelper_GetUserID_Call {
	return &MockJWTHelper_GetUserID_Call{Call: _e.mock.On("GetUserID", ctx)}
}

func (_c *MockJWTHelper_GetUserID_Call) Run(run func(ctx context.Context)) *MockJWTHelper_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockJWTHelper_GetUserID_Call) Return(_a0 int, _a1 error) *MockJWTHelper_GetUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTHelper_GetUserID_Call) RunAndReturn(run func(context.Context) (int, error)) *MockJWTHelper_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJWTHelper creates a new instance of MockJWTHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTHelper {
	mock := &MockJWTHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
