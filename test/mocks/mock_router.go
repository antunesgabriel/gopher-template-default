// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	api "github.com/antunesgabriel/gopher-template-default/internal/delivery/api"

	mock "github.com/stretchr/testify/mock"
)

// MockRouter is an autogenerated mock type for the Router type
type MockRouter struct {
	mock.Mock
}

type MockRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRouter) EXPECT() *MockRouter_Expecter {
	return &MockRouter_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: path, h
func (_m *MockRouter) Delete(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouter_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRouter_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouter_Expecter) Delete(path interface{}, h interface{}) *MockRouter_Delete_Call {
	return &MockRouter_Delete_Call{Call: _e.mock.On("Delete", path, h)}
}

func (_c *MockRouter_Delete_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouter_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Delete_Call) Return() *MockRouter_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Delete_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouter_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: path, h
func (_m *MockRouter) Get(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRouter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouter_Expecter) Get(path interface{}, h interface{}) *MockRouter_Get_Call {
	return &MockRouter_Get_Call{Call: _e.mock.On("Get", path, h)}
}

func (_c *MockRouter_Get_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Get_Call) Return() *MockRouter_Get_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Get_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Handler provides a mock function with given fields:
func (_m *MockRouter) Handler() http.Handler {
	ret := _m.Called()

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// MockRouter_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockRouter_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *MockRouter_Expecter) Handler() *MockRouter_Handler_Call {
	return &MockRouter_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *MockRouter_Handler_Call) Run(run func()) *MockRouter_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRouter_Handler_Call) Return(_a0 http.Handler) *MockRouter_Handler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Handler_Call) RunAndReturn(run func() http.Handler) *MockRouter_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: path, h
func (_m *MockRouter) Patch(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouter_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockRouter_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouter_Expecter) Patch(path interface{}, h interface{}) *MockRouter_Patch_Call {
	return &MockRouter_Patch_Call{Call: _e.mock.On("Patch", path, h)}
}

func (_c *MockRouter_Patch_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouter_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Patch_Call) Return() *MockRouter_Patch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Patch_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouter_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function with given fields: path, h
func (_m *MockRouter) Post(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouter_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockRouter_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouter_Expecter) Post(path interface{}, h interface{}) *MockRouter_Post_Call {
	return &MockRouter_Post_Call{Call: _e.mock.On("Post", path, h)}
}

func (_c *MockRouter_Post_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouter_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Post_Call) Return() *MockRouter_Post_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Post_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouter_Post_Call {
	_c.Call.Return(run)
	return _c
}

// ProtectedGroup provides a mock function with given fields: path, handleFn
func (_m *MockRouter) ProtectedGroup(path string, handleFn func(api.RouteGroup)) {
	_m.Called(path, handleFn)
}

// MockRouter_ProtectedGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtectedGroup'
type MockRouter_ProtectedGroup_Call struct {
	*mock.Call
}

// ProtectedGroup is a helper method to define mock.On call
//   - path string
//   - handleFn func(api.RouteGroup)
func (_e *MockRouter_Expecter) ProtectedGroup(path interface{}, handleFn interface{}) *MockRouter_ProtectedGroup_Call {
	return &MockRouter_ProtectedGroup_Call{Call: _e.mock.On("ProtectedGroup", path, handleFn)}
}

func (_c *MockRouter_ProtectedGroup_Call) Run(run func(path string, handleFn func(api.RouteGroup))) *MockRouter_ProtectedGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(api.RouteGroup)))
	})
	return _c
}

func (_c *MockRouter_ProtectedGroup_Call) Return() *MockRouter_ProtectedGroup_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_ProtectedGroup_Call) RunAndReturn(run func(string, func(api.RouteGroup))) *MockRouter_ProtectedGroup_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: path, h
func (_m *MockRouter) Put(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouter_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockRouter_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouter_Expecter) Put(path interface{}, h interface{}) *MockRouter_Put_Call {
	return &MockRouter_Put_Call{Call: _e.mock.On("Put", path, h)}
}

func (_c *MockRouter_Put_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouter_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouter_Put_Call) Return() *MockRouter_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Put_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouter_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Use provides a mock function with given fields: middleware
func (_m *MockRouter) Use(middleware func(http.Handler) http.Handler) {
	_m.Called(middleware)
}

// MockRouter_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type MockRouter_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - middleware func(http.Handler) http.Handler
func (_e *MockRouter_Expecter) Use(middleware interface{}) *MockRouter_Use_Call {
	return &MockRouter_Use_Call{Call: _e.mock.On("Use", middleware)}
}

func (_c *MockRouter_Use_Call) Run(run func(middleware func(http.Handler) http.Handler)) *MockRouter_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(http.Handler) http.Handler))
	})
	return _c
}

func (_c *MockRouter_Use_Call) Return() *MockRouter_Use_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Use_Call) RunAndReturn(run func(func(http.Handler) http.Handler)) *MockRouter_Use_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRouter creates a new instance of MockRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRouter {
	mock := &MockRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
