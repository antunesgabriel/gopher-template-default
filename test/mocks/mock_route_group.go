// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockRouteGroup is an autogenerated mock type for the RouteGroup type
type MockRouteGroup struct {
	mock.Mock
}

type MockRouteGroup_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRouteGroup) EXPECT() *MockRouteGroup_Expecter {
	return &MockRouteGroup_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: path, h
func (_m *MockRouteGroup) Delete(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouteGroup_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRouteGroup_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouteGroup_Expecter) Delete(path interface{}, h interface{}) *MockRouteGroup_Delete_Call {
	return &MockRouteGroup_Delete_Call{Call: _e.mock.On("Delete", path, h)}
}

func (_c *MockRouteGroup_Delete_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouteGroup_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouteGroup_Delete_Call) Return() *MockRouteGroup_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouteGroup_Delete_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouteGroup_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: path, h
func (_m *MockRouteGroup) Get(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouteGroup_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRouteGroup_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouteGroup_Expecter) Get(path interface{}, h interface{}) *MockRouteGroup_Get_Call {
	return &MockRouteGroup_Get_Call{Call: _e.mock.On("Get", path, h)}
}

func (_c *MockRouteGroup_Get_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouteGroup_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouteGroup_Get_Call) Return() *MockRouteGroup_Get_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouteGroup_Get_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouteGroup_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: path, h
func (_m *MockRouteGroup) Patch(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouteGroup_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockRouteGroup_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouteGroup_Expecter) Patch(path interface{}, h interface{}) *MockRouteGroup_Patch_Call {
	return &MockRouteGroup_Patch_Call{Call: _e.mock.On("Patch", path, h)}
}

func (_c *MockRouteGroup_Patch_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouteGroup_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouteGroup_Patch_Call) Return() *MockRouteGroup_Patch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouteGroup_Patch_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouteGroup_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function with given fields: path, h
func (_m *MockRouteGroup) Post(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouteGroup_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockRouteGroup_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouteGroup_Expecter) Post(path interface{}, h interface{}) *MockRouteGroup_Post_Call {
	return &MockRouteGroup_Post_Call{Call: _e.mock.On("Post", path, h)}
}

func (_c *MockRouteGroup_Post_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouteGroup_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouteGroup_Post_Call) Return() *MockRouteGroup_Post_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouteGroup_Post_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouteGroup_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: path, h
func (_m *MockRouteGroup) Put(path string, h http.HandlerFunc) {
	_m.Called(path, h)
}

// MockRouteGroup_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockRouteGroup_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - path string
//   - h http.HandlerFunc
func (_e *MockRouteGroup_Expecter) Put(path interface{}, h interface{}) *MockRouteGroup_Put_Call {
	return &MockRouteGroup_Put_Call{Call: _e.mock.On("Put", path, h)}
}

func (_c *MockRouteGroup_Put_Call) Run(run func(path string, h http.HandlerFunc)) *MockRouteGroup_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.HandlerFunc))
	})
	return _c
}

func (_c *MockRouteGroup_Put_Call) Return() *MockRouteGroup_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouteGroup_Put_Call) RunAndReturn(run func(string, http.HandlerFunc)) *MockRouteGroup_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRouteGroup creates a new instance of MockRouteGroup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRouteGroup(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRouteGroup {
	mock := &MockRouteGroup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
