// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockPasswordHelper is an autogenerated mock type for the PasswordHelper type
type MockPasswordHelper struct {
	mock.Mock
}

type MockPasswordHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPasswordHelper) EXPECT() *MockPasswordHelper_Expecter {
	return &MockPasswordHelper_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: password, hashedPassword
func (_m *MockPasswordHelper) Compare(password string, hashedPassword string) error {
	ret := _m.Called(password, hashedPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(password, hashedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPasswordHelper_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockPasswordHelper_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - password string
//   - hashedPassword string
func (_e *MockPasswordHelper_Expecter) Compare(password interface{}, hashedPassword interface{}) *MockPasswordHelper_Compare_Call {
	return &MockPasswordHelper_Compare_Call{Call: _e.mock.On("Compare", password, hashedPassword)}
}

func (_c *MockPasswordHelper_Compare_Call) Run(run func(password string, hashedPassword string)) *MockPasswordHelper_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockPasswordHelper_Compare_Call) Return(_a0 error) *MockPasswordHelper_Compare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPasswordHelper_Compare_Call) RunAndReturn(run func(string, string) error) *MockPasswordHelper_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: password
func (_m *MockPasswordHelper) Hash(password string) ([]byte, error) {
	ret := _m.Called(password)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPasswordHelper_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockPasswordHelper_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - password string
func (_e *MockPasswordHelper_Expecter) Hash(password interface{}) *MockPasswordHelper_Hash_Call {
	return &MockPasswordHelper_Hash_Call{Call: _e.mock.On("Hash", password)}
}

func (_c *MockPasswordHelper_Hash_Call) Run(run func(password string)) *MockPasswordHelper_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPasswordHelper_Hash_Call) Return(_a0 []byte, _a1 error) *MockPasswordHelper_Hash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPasswordHelper_Hash_Call) RunAndReturn(run func(string) ([]byte, error)) *MockPasswordHelper_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPasswordHelper creates a new instance of MockPasswordHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPasswordHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPasswordHelper {
	mock := &MockPasswordHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
